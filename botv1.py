# -*- coding: utf-8 -*-
# path: bot.py (Part 1/3)
from __future__ import annotations
from flask import Flask
import os
import json
import random
import time
import threading
from typing import Optional, Dict, List, Tuple

import telebot
from telebot import types

# --------------------------- Configuration ---------------------------
TOKEN = os.getenv("8083007020:AAFdZ5vsSPJYnaKQImUOVd7IC_JMEPYd66E", "8083007020:AAFdZ5vsSPJYnaKQImUOVd7IC_JMEPYd66E")
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")  # HTML for <b><i>...</i></b>

USER_FILE = "users.json"
MAX_PHOTOS = 3
ANON_MESSAGE_BONUS = 0.01

DEFAULT_FILTERS = {"city": None, "age_min": None, "age_max": None, "pref": None}
WELCOME_IMAGE_URL = ""   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: URL –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
SAFETY_IMAGE_URL = ""    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: URL –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

# –û—á–µ—Ä–µ–¥—å/–ø–∞—Ä—ã –∞–Ω–æ–Ω–∏–º-—á–∞—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã
ANON_QUEUE: List[int] = []
ANON_PEERS: Dict[int, int] = {}
ANON_STATS: Dict[int, dict] = {}  # {uid: {partner, start_ts, counts:{text,photo,video,audio,voice,document,sticker}}}

# –°–µ—Å—Å–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
USER_SESSION: Dict[int, dict] = {}
SEARCH_STATE: Dict[int, dict] = {}

# –õ–µ–Ω—Ç–∞ "–ö—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª": { user_id: {"queue": [ids], "idx": int, "current": int} }
LIKERS_STATE: Dict[int, dict] = {}

app = Flask(name)

@app.route("/")
def home():
    return "Render done"

if name == "piska":
    app.run(host="0.0.0.0", port=5000)

def get_actions_kb() -> types.ReplyKeyboardMarkup:
    m = types.ReplyKeyboardMarkup(resize_keyboard=True)
    m.row("‚ù§Ô∏è –õ–∞–π–∫", "‚è≠ –°–∫–∏–ø")
    m.row("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ", "üö´ –ë–ª–æ–∫")
    m.row("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", "‚¨Ö –ù–∞–∑–∞–¥")
    return m

# --------------------------- Storage ---------------------------
if os.path.exists(USER_FILE):
    with open(USER_FILE, "r", encoding="utf-8") as f:
        users: Dict[str, dict] = json.load(f)
else:
    users = {}

def now_ts() -> float:
    return time.time()

def save_users() -> None:
    with open(USER_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

# --------------------------- Migrations ---------------------------
for uid, u in list(users.items()):
    u.setdefault("likes", [])
    u.setdefault("matches", [])
    u.setdefault("lightnings", 0.0)
    u.setdefault("age", None)
    u.setdefault("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    u.setdefault("city", "–ù–µ —É–∫–∞–∑–∞–Ω")
    u.setdefault("about", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
    u.setdefault("photos", [])
    u.setdefault("gender", None)
    u.setdefault("pref", "any")
    u.setdefault("blocked", [])
    u.setdefault("seen", [])
    u.setdefault("reports", 0)
    u.setdefault("last_active", 0.0)
    u.setdefault("filters", dict(DEFAULT_FILTERS))
    u.setdefault("status", "active")  # active|frozen|deactivated
    u.setdefault("incoming_likes_unseen", [])
    u.setdefault("last_inactive_nudge", 0.0)
    u.setdefault("last_safety_nudge", 0.0)
    u.setdefault("pending_rate", [])  # [{partner: int, due: float}]
    u.setdefault("ratings_received_total", 0)
    u.setdefault("ratings_received_count", 0)

# --------------------------- City normalization ---------------------------
CITY_TRIGGERS = {
    # –ú–æ—Å–∫–≤–∞
    "–º—Å–∫": "–ú–æ—Å–∫–≤–∞", "moscow": "–ú–æ—Å–∫–≤–∞", "–º–æ—Å–∫–≤–∞": "–ú–æ—Å–∫–≤–∞",
    # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
    "—Å–ø–±": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "spb": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ø–∏—Ç–µ—Ä": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "—Å–∞–Ω–∫—Ç –ø–µ—Ç–µ—Ä–±—É—Ä–≥": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    # –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫
    "–Ω—Å–∫": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–Ω–æ–≤–æ—Å–∏–±": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    # –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
    "–µ–∫–±": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    # –ö–∞–∑–∞–Ω—å
    "–∫–∞–∑–∞–Ω—å": "–ö–∞–∑–∞–Ω—å",
    # –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥
    "–Ω–Ω": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
    # –°–∞–º–∞—Ä–∞
    "—Å–∞–º–∞—Ä–∞": "–°–∞–º–∞—Ä–∞",
    # –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É
    "—Ä–æ—Å—Ç–æ–≤": "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "—Ä–æ—Å—Ç–æ–≤ –Ω–∞ –¥–æ–Ω—É": "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "rnd": "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
    # –£—Ñ–∞
    "—É—Ñ–∞": "–£—Ñ–∞",
    # –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫
    "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
    # –ü–µ—Ä–º—å
    "–ø–µ—Ä–º—å": "–ü–µ—Ä–º—å",
    # –í–æ—Ä–æ–Ω–µ–∂
    "–≤–æ—Ä–æ–Ω–µ–∂": "–í–æ—Ä–æ–Ω–µ–∂",
    # –í–æ–ª–≥–æ–≥—Ä–∞–¥
    "–≤–æ–ª–≥–æ–≥—Ä–∞–¥": "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
    # –û–º—Å–∫
    "–æ–º—Å–∫": "–û–º—Å–∫",
    # –ß–µ–ª—è–±–∏–Ω—Å–∫
    "—á–µ–ª—è–±–∏–Ω—Å–∫": "–ß–µ–ª—è–±–∏–Ω—Å–∫",
    # –ú–∏–Ω—Å–∫/–ê–ª–º–∞—Ç—ã/–ö–∏–µ–≤
    "–º–∏–Ω—Å–∫": "–ú–∏–Ω—Å–∫", "–∞–ª–º–∞—Ç—ã": "–ê–ª–º–∞—Ç—ã", "–∫–∏–µ–≤": "–ö–∏–µ–≤", "–∫–∏—ó–≤": "–ö–∏–µ–≤",
}

POPULAR_CITIES = list({v for v in CITY_TRIGGERS.values()}) + [
    "–¢—é–º–µ–Ω—å", "–ò—Ä–∫—É—Ç—Å–∫", "–¢–æ–º—Å–∫", "–°–æ—á–∏", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
]

def normalize_city(raw: str) -> Tuple[Optional[str], List[str]]:
    if not raw:
        return None, POPULAR_CITIES[:6]
    txt = raw.strip().lower().replace(".", " ").replace(",", " ")
    if txt in CITY_TRIGGERS:
        return CITY_TRIGGERS[txt], []
    for key, val in CITY_TRIGGERS.items():
        if txt.startswith(key):
            return val, []
    guesses = [c for c in POPULAR_CITIES if c.lower().startswith(txt[:3])]
    return (None, guesses[:6]) if guesses else (None, POPULAR_CITIES[:6])

# --------------------------- Formatting helpers ---------------------------
def decorate(text: str) -> str:
    return f"<b><i>{text}</i></b>"

def stars(avg: float) -> str:
    if avg <= 0:
        return "‚Äî"
    full = int(round(avg))
    full = max(1, min(full, 5))
    return "‚≠ê" * full + "‚òÜ" * (5 - full)

def profile_caption(u: dict, prefix: str = "üë§ –ê–Ω–∫–µ—Ç–∞") -> str:
    avg = 0.0
    if u.get("ratings_received_count", 0) > 0:
        avg = u["ratings_received_total"] / float(u["ratings_received_count"])
    gender_h = {"male": "üë®", "female": "üë©"}.get(u.get("gender"), "‚ùì")
    pref_h = {"male": "–ø–∞—Ä–Ω–∏", "female": "–¥–µ–≤—É—à–∫–∏", "any": "–≤—Å–µ"}.get(u.get("pref", "any"), "–≤—Å–µ")
    about = (u.get("about") or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è").strip()
    about = about.replace("\n\n", "\n").replace("\n", "\n\n")
    return (
        f"<b>{prefix}</b>\n"
        f"‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî\n"
        f"üë§ <b>{u.get('name','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>, {u.get('age','?')} –ª–µ—Ç\n"
        f"üåÜ {u.get('city','–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚öß –ü–æ–ª: {gender_h}  ‚Ä¢  üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {pref_h}\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{avg:.1f}</b> {stars(avg)}\n"
        f"‚ö° –ú–æ–ª–Ω–∏–∏: <b>{u.get('lightnings',0):.2f}</b>\n\n"
        f"üìù <i>{about}</i>"
    )

def send_card(chat_id: int, target_id: int, prefix: str = "üë§ –ê–Ω–∫–µ—Ç–∞", extra_kb: Optional[types.InlineKeyboardMarkup] = None):
    if str(target_id) not in users:
        return
    u = users[str(target_id)]
    media_ids = u.get("photos", [])
    if media_ids:
        if len(media_ids) == 1:
            bot.send_photo(chat_id, media_ids[0], caption=profile_caption(u, prefix), reply_markup=extra_kb)
        else:
            media = [types.InputMediaPhoto(p) for p in media_ids]
            bot.send_media_group(chat_id, media)
            bot.send_message(chat_id, profile_caption(u, prefix), reply_markup=extra_kb)
    else:
        bot.send_message(chat_id, profile_caption(u, prefix), reply_markup=extra_kb)

def nice_menu_title(title: str) -> str:
    return decorate(f"‚ú® {title} ‚ú®")

def can_notify(u: dict) -> bool:
    return u.get("status", "active") == "active"

# --------------------------- Scheduler (background jobs) ---------------------------
def scheduler_loop():
    while True:
        try:
            now = now_ts()
            # 1) Inactive 24h reminder
            for uid, u in list(users.items()):
                if u.get("status") != "active":
                    continue
                last = u.get("last_active", 0)
                last_ping = u.get("last_inactive_nudge", 0)
                if last > 0 and now - last >= 24 * 3600 and now - last_ping >= 12 * 3600:
                    try:
                        bot.send_message(int(uid), decorate("üëã –î–∞–≤–Ω–µ–Ω—å–∫–æ —Ç–µ–±—è –Ω–µ –≤–∏–¥–µ–ª–∏! –ü–æ—è–≤–∏–ª–æ—Å—å –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç. –ó–∞–≥–ª—è–Ω–∏ ‚Äî –≤–¥—Ä—É–≥ —Ç–∞–º —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ üòâ"))
                        u["last_inactive_nudge"] = now
                    except Exception:
                        pass

            # 2) Safety reminder every 30h
            for uid, u in list(users.items()):
                if u.get("status") != "active":
                    continue
                last_s = u.get("last_safety_nudge", 0)
                if now - last_s >= 30 * 3600:
                    try:
                        if SAFETY_IMAGE_URL:
                            bot.send_photo(int(uid), SAFETY_IMAGE_URL, caption=decorate("üîê –ë—É–¥—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º.\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞—Å—Ç–æ—Ä–æ–∂–∏–ª–æ ‚Äî –ø–æ–∂–∞–ª—É–π—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚ö†Ô∏è."))
                        else:
                            bot.send_message(int(uid), decorate("üîê –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –±–µ—Ä–µ–≥–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–π –ø—Ä–æ—Ñ–∏–ª–∏, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π –¥–µ–Ω—å–≥–∏ –∏ —Å—Å—ã–ª–∫–∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."))
                        u["last_safety_nudge"] = now
                    except Exception:
                        pass

            # 3) Rating prompts
            for uid, u in list(users.items()):
                if not can_notify(u):
                    continue
                pending = u.get("pending_rate", [])
                new_pending = []
                for item in pending:
                    partner = item.get("partner")
                    due = item.get("due", 0)
                    if now >= due:
                        try:
                            kb = types.InlineKeyboardMarkup()
                            row = [types.InlineKeyboardButton(f"{i} ‚≠ê", callback_data=f"rate:{partner}:{i}") for i in range(1, 6)]
                            kb.row(*row)
                            bot.send_message(int(uid), decorate("üìù –û—Ü–µ–Ω–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –∏—Ç–æ–≥–∞–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:"), reply_markup=kb)
                        except Exception:
                            pass
                    else:
                        new_pending.append(item)
                if len(new_pending) != len(pending):
                    u["pending_rate"] = new_pending
            save_users()
        except Exception:
            pass
        time.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

threading.Thread(target=scheduler_loop, daemon=True).start()
# path: bot.py (Part 2/3)

# --------------------------- Menus ---------------------------
def main_menu(chat_id: int) -> None:
    m = types.ReplyKeyboardMarkup(resize_keyboard=True)
    m.row("üîç –ü–æ–∏—Å–∫", "üìù –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    m.row("üíò –ö—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª", "üî• –ú—ç—Ç—á–∏")
    m.row("üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç", "üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    m.row("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    bot.send_message(chat_id, nice_menu_title("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), reply_markup=m)

def settings_menu(chat_id: int) -> None:
    m = types.ReplyKeyboardMarkup(resize_keyboard=True)
    m.add("‚úè –ò–º—è", "üéÇ –í–æ–∑—Ä–∞—Å—Ç", "üåÜ –ì–æ—Ä–æ–¥", "üìù –û–ø–∏—Å–∞–Ω–∏–µ")
    m.add("üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", "üîé –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
    m.add("‚ö° –ú–æ–ª–Ω–∏–∏", "üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    m.add("üßä –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å / –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å", "üóë –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å / –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
    m.add("‚¨Ö –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(chat_id, nice_menu_title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"), reply_markup=m)

def filters_menu(chat_id: int) -> None:
    f = users[str(chat_id)].get("filters", dict(DEFAULT_FILTERS))
    human_city = f.get("city") or "–õ—é–±–æ–π"
    human_age = "–õ—é–±–æ–π"
    if f.get("age_min") is not None or f.get("age_max") is not None:
        amin = f.get("age_min") or "?"
        amax = f.get("age_max") or "?"
        human_age = f"{amin}-{amax}"
    human_pref = {"male": "–ü–∞—Ä–Ω–∏", "female": "–î–µ–≤—É—à–∫–∏", None: "–ö–∞–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ"}.get(f.get("pref"), "–í—Å–µ")

    m = types.ReplyKeyboardMarkup(resize_keyboard=True)
    m.add("üèôÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É", "üéö –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É")
    m.add("üéØ –ö–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å", "üîÑ –°–±—Ä–æ—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    m.add("üßπ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
    m.add("‚¨Ö –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(
        chat_id,
        decorate(
            f"üîé –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞\n\n"
            f"–ì–æ—Ä–æ–¥: <b>{human_city}</b>\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: <b>{human_age}</b>\n"
            f"–ö–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å: <b>{human_pref}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        ),
        reply_markup=m,
    )

def show_lightnings_info(chat_id: int) -> None:
    u = users[str(chat_id)]
    bot.send_message(
        chat_id,
        decorate(
            "‚ö° –°–∏—Å—Ç–µ–º–∞ –ú–æ–ª–Ω–∏–π\n\n"
            "–ú–æ–ª–Ω–∏–∏ ‚Äî –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
            "‚ù§Ô∏è –õ–∞–π–∫: +0.1\n"
            "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: +0.2\n"
            f"üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç ‚Äî –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: +{ANON_MESSAGE_BONUS:.2f}\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{u.get('lightnings',0):.2f}</b> ‚ö°"
        ),
    )

# --------------------------- Start / Welcome ---------------------------
@bot.message_handler(commands=["start"])
def start_message(message):
    chat_id = message.chat.id
    user = users.get(str(chat_id))
    if user and user.get("status") != "deactivated":
        users[str(chat_id)].setdefault("filters", dict(DEFAULT_FILTERS))
        save_users()
        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m.row("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –∞–Ω–∫–µ—Ç–æ–π")
        m.row("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É")
        if WELCOME_IMAGE_URL:
            bot.send_photo(chat_id, WELCOME_IMAGE_URL, caption=decorate("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üéâ"))
        bot.send_message(
            chat_id,
            decorate("‚ú® –Ø –ø–æ–º–Ω—é —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é."),
            reply_markup=m,
        )
    else:
        if WELCOME_IMAGE_URL:
            bot.send_photo(chat_id, WELCOME_IMAGE_URL, caption=decorate("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Marsellio ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ –¥—Ä—É–∑—å—è –∏ —Å–∏–º–ø–∞—Ç–∏–∏ üí´"))
        bot.send_message(
            chat_id,
            decorate(
                "üåü –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Marsellio.\n\n"
                "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –æ–±—â–∞—Ç—å—Å—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–∑–µ–π. "
                "–ú—ã –ø–æ–º–æ–∂–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–∞—Å–∏–≤—É—é –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –ø–æ —Ç–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. "
                "–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å?"
            ),
        )
        start_registration(message)

# --------------------------- Registration ---------------------------
def start_registration(message) -> None:
    chat_id = message.chat.id
    USER_SESSION[chat_id] = {"state": "registration", "step": "age", "data": {"photos": []}}
    bot.send_message(chat_id, decorate("üóì –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:"))

@bot.message_handler(func=lambda m: m.chat.id in USER_SESSION and USER_SESSION[m.chat.id].get("state") == "registration")
def process_registration(message) -> None:
    chat_id = message.chat.id
    session = USER_SESSION[chat_id]
    step = session["step"]
    data = session["data"]

    if step == "age":
        if not (message.text or "").isdigit():
            bot.send_message(chat_id, decorate("‚ö† –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 18"))
            return
        age = int(message.text)
        if age < 14:
            bot.send_message(chat_id, decorate("üö´ –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å 14 –ª–µ—Ç."))
            return
        data["age"] = age
        session["step"] = "gender"
        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m.row("üë© –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π")
        m.row("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        bot.send_message(chat_id, decorate("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª (–∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"), reply_markup=m)
        return

    if step == "gender":
        txt = (message.text or "").lower().strip()
        if txt == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            data["gender"] = None
        elif "–∂–µ–Ω" in txt:
            data["gender"] = "female"
        elif "–º—É–∂" in txt:
            data["gender"] = "male"
        else:
            bot.send_message(chat_id, decorate("‚ö† –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."))
            return
        session["step"] = "pref"
        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m.row("üë© –î–µ–≤—É—à–∫–∏", "üë® –ü–∞—Ä–Ω–∏")
        m.row("–í—Å–µ")
        bot.send_message(chat_id, decorate("–ö–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?"), reply_markup=m)
        return

    if step == "pref":
        txt = (message.text or "").lower().strip()
        if "–¥–µ–≤—É—à" in txt:
            data["pref"] = "female"
        elif "–ø–∞—Ä–Ω" in txt:
            data["pref"] = "male"
        elif txt == "–≤—Å–µ":
            data["pref"] = "any"
        else:
            bot.send_message(chat_id, decorate("‚ö† –í—ã–±–µ—Ä–∏ —Å –∫–Ω–æ–ø–æ–∫: –î–µ–≤—É—à–∫–∏/–ü–∞—Ä–Ω–∏/–í—Å–µ."))
            return
        session["step"] = "name"
        bot.send_message(chat_id, decorate("‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –∏–ª–∏ –Ω–∏–∫:"))
        return

    if step == "name":
        data["name"] = (message.text or "").strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        session["step"] = "city"
        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m.row("–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥")
        m.row("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö–∞–∑–∞–Ω—å", "–õ—é–±–æ–π")
        m.row("–û—Ç–º–µ–Ω–∞")
        bot.send_message(chat_id, decorate("üåÜ –£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫):"), reply_markup=m)
        return

    if step == "city":
        txt = (message.text or "").strip()
        if txt.lower() in ["–æ—Ç–º–µ–Ω–∞", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]:
            data["city"] = "–ù–µ —É–∫–∞–∑–∞–Ω"
        elif txt.lower() == "–ª—é–±–æ–π":
            data["city"] = "–ù–µ —É–∫–∞–∑–∞–Ω"
        else:
            normalized, suggestions = normalize_city(txt)
            if normalized:
                data["city"] = normalized
            else:
                m = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for i in range(0, len(suggestions), 3):
                    m.row(*suggestions[i:i+3])
                m.row("–õ—é–±–æ–π", "–û—Ç–º–µ–Ω–∞")
                bot.send_message(chat_id, decorate("–ù–µ –ø–æ–Ω—è–ª –≥–æ—Ä–æ–¥. –í—ã–±–µ—Ä–∏ –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:"), reply_markup=m)
                return
        session["step"] = "photos"
        send_photo_instructions(chat_id)
        return

    if step == "photos":
        text = (message.text or "").strip().lower()
        if text in ["‚úÖ –≥–æ—Ç–æ–≤–æ", "–≥–æ—Ç–æ–≤–æ"]:
            if not data["photos"]:
                bot.send_message(chat_id, decorate("‚ö† –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!"))
                return
            session["step"] = "about"
            m = types.ReplyKeyboardMarkup(resize_keyboard=True)
            m.row("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            bot.send_message(chat_id, decorate("üìù –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ (–∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"), reply_markup=m)
            return
        bot.send_message(chat_id, decorate(f"üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ '‚úÖ –ì–æ—Ç–æ–≤–æ'. ({len(data['photos'])}/{MAX_PHOTOS})"))
        return

    if step == "about":
        if (message.text or "").lower().strip() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            data["about"] = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        else:
            data["about"] = message.text
        finish_registration(chat_id)
        return

def send_photo_instructions(chat_id: int) -> None:
    m = types.ReplyKeyboardMarkup(resize_keyboard=True)
    m.row("‚úÖ –ì–æ—Ç–æ–≤–æ", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    bot.send_message(chat_id, decorate(f"üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏ –¥–æ {MAX_PHOTOS} —Ñ–æ—Ç–æ."), reply_markup=m)

@bot.message_handler(content_types=["photo"])
def handle_photo(message) -> None:
    chat_id = message.chat.id
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    if chat_id in USER_SESSION and USER_SESSION[chat_id].get("state") == "registration" and USER_SESSION[chat_id].get("step") == "photos":
        photos = USER_SESSION[chat_id]["data"]["photos"]
        if len(photos) >= MAX_PHOTOS:
            bot.send_message(chat_id, decorate(f"‚ö† –ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS} —Ñ–æ—Ç–æ."))
            return
        file_id = message.photo[-1].file_id
        photos.append(file_id)
        bot.send_message(chat_id, decorate(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ({len(photos)}/{MAX_PHOTOS})"))
        return
    # –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç: –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ
    if chat_id in ANON_PEERS:
        anon_forward_any(message)
        return

def finish_registration(chat_id: int) -> None:
    data = USER_SESSION[chat_id]["data"]
    users[str(chat_id)] = {
        "age": data["age"],
        "name": data["name"],
        "city": data.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω"),
        "about": data.get("about", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"),
        "photos": data["photos"],
        "gender": data.get("gender"),
        "pref": data.get("pref", "any"),
        "likes": [],
        "matches": [],
        "blocked": [],
        "seen": [],
        "reports": 0,
        "lightnings": 0.0,
        "last_active": now_ts(),
        "filters": dict(DEFAULT_FILTERS),
        "status": "active",
        "incoming_likes_unseen": [],
        "last_inactive_nudge": 0.0,
        "last_safety_nudge": 0.0,
        "pending_rate": [],
        "ratings_received_total": 0,
        "ratings_received_count": 0,
    }
    save_users()
    USER_SESSION.pop(chat_id, None)
    bot.send_message(chat_id, decorate("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!"))
    main_menu(chat_id)

# --------------------------- Matching & Filters ---------------------------
def gender_fits(my_pref: str, target_gender: Optional[str]) -> bool:
    if my_pref == "any":
        return True
    return (target_gender or "") == my_pref

def profile_matches_for(chat_id: int) -> List[int]:
    me = users[str(chat_id)]
    if me.get("status") != "active":
        return []
    f = me.get("filters", dict(DEFAULT_FILTERS))
    pref = f.get("pref") or me.get("pref", "any")

    def city_match(u_city: str) -> bool:
        if not f.get("city"):
            return True
        return (u_city or "").strip().lower() == f["city"].strip().lower()

    def age_match(u_age: Optional[int]) -> bool:
        if u_age is None:
            return True
        amin = f.get("age_min")
        amax = f.get("age_max")
        if amin is not None and u_age < amin:
            return False
        if amax is not None and u_age > amax:
            return False
        return True

    blocked_by_me = set(me.get("blocked", []))
    seen = set(me.get("seen", []))

    candidates: List[int] = []
    for uid, u in users.items():
        if uid == str(chat_id):
            continue
        if u.get("status") != "active":
            continue
        tuid = int(uid)
        if tuid in blocked_by_me:
            continue
        if chat_id in set(u.get("blocked", [])):
            continue
        if tuid in seen:
            continue
        if not gender_fits(pref, u.get("gender")):
            continue
        if not age_match(u.get("age")):
            continue
        if not city_match(u.get("city")):
            continue
        candidates.append(tuid)
    return candidates

def search_profile(chat_id: int) -> None:
    candidates = profile_matches_for(chat_id)
    if not candidates:
        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m.row("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "üîÑ –°–±—Ä–æ—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        m.row("‚¨Ö –ù–∞–∑–∞–¥")
        bot.send_message(chat_id, decorate("‚ùå –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∞–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."), reply_markup=m)
        return
    target_id = random.choice(candidates)
    SEARCH_STATE[chat_id] = {"current": target_id}
    users[str(chat_id)].setdefault("seen", []).append(target_id)
    users[str(chat_id)]["last_active"] = now_ts()
    save_users()

    act_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    act_kb.row("‚ù§Ô∏è –õ–∞–π–∫", "‚è≠ –°–∫–∏–ø")
    act_kb.row("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ", "üö´ –ë–ª–æ–∫")
    act_kb.row("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
    act_kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    send_card(chat_id, target_id, prefix="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
    bot.send_message(chat_id, decorate("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"), reply_markup=act_kb)

# --------------------------- Helpers ---------------------------
def leaderboard_top(n: int = 10) -> List[Tuple[int, float]]:
    pairs = [(int(uid), u.get("lightnings", 0.0)) for uid, u in users.items() if u.get("status") != "deactivated"]
    pairs.sort(key=lambda x: x[1], reverse=True)
    return pairs[:n]

def clear_unseen_likes(chat_id: int) -> None:
    users[str(chat_id)]["incoming_likes_unseen"] = []
    save_users()

# --------------------------- Blacklist UI ---------------------------
def show_blacklist(chat_id: int) -> None:
    me = users[str(chat_id)]
    bl = me.get("blocked", [])
    if not bl:
        bot.send_message(chat_id, decorate("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç."))
        return
    bot.send_message(chat_id, decorate(f"–í —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ {len(bl)} —á–µ–ª–æ–≤–µ–∫(–∞). –ù–∏–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∏:"))
    for uid in bl[:15]:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock:{uid}"))
        send_card(chat_id, uid, prefix="üö´ –í –ß—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ", extra_kb=kb)

# --------------------------- Profile ---------------------------
def show_my_profile(chat_id: int) -> None:
    send_card(chat_id, chat_id, prefix="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    main_menu(chat_id)

# --------------------------- Likes / Matches flow ---------------------------
def notify_like_received(target_id: int, liker_id: int) -> None:
    u = users.get(str(target_id))
    if not u:
        return
    unseen = u.setdefault("incoming_likes_unseen", [])
    if liker_id not in unseen:
        unseen.append(liker_id)
        save_users()
    if can_notify(u):
        cnt = len(unseen)
        try:
            bot.send_message(target_id, decorate(f"üíå –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å {cnt} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª{'—é' if cnt==1 else '—è–º'}. –ù–∞–∂–º–∏ ¬´–ö—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."))
        except Exception:
            pass

def handle_mutual_match(a_id: int, b_id: int) -> None:
    A = users[str(a_id)]
    B = users[str(b_id)]
    if b_id not in A.get("matches", []):
        A["matches"].append(b_id)
    if a_id not in B.get("matches", []):
        B["matches"].append(a_id)
    save_users()
    def mention(uid: int, u: dict) -> str:
        if u and u.get("username"):
            return f"@{u['username']}"
        return f'<a href="tg://user?id={uid}">{u.get("name","–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}</a>'
    A["last_active"] = now_ts()
    B["last_active"] = now_ts()
    try:
        bot.send_message(a_id, decorate(f"üî• –£ –≤–∞—Å –º–µ—Ç—á —Å {mention(b_id, B)}!"))
    except Exception:
        pass
    try:
        bot.send_message(b_id, decorate(f"üî• –£ –≤–∞—Å –º–µ—Ç—á —Å {mention(a_id, A)}!"))
    except Exception:
        pass
    due = now_ts() + 3600
    A.setdefault("pending_rate", []).append({"partner": b_id, "due": due})
    B.setdefault("pending_rate", []).append({"partner": a_id, "due": due})
    save_users()

def like_current(chat_id: int) -> None:
    if chat_id not in SEARCH_STATE:
        return
    target_id = SEARCH_STATE[chat_id]["current"]
    my = users[str(chat_id)]
    trg = users[str(target_id)]
    if target_id not in my.get("likes", []):
        my["likes"].append(target_id)
    my["lightnings"] = my.get("lightnings", 0) + 0.1
    save_users()
    notify_like_received(target_id, chat_id)
    if chat_id in trg.get("likes", []):
        handle_mutual_match(chat_id, target_id)
    else:
        bot.send_message(chat_id, decorate("üíå –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ñ–¥—ë–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏."))
    search_profile(chat_id)

# ---------- –õ–µ–Ω—Ç–∞ ¬´–ö—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª¬ª (–∫–∞–∫ –≤ –ø–æ–∏—Å–∫–µ) ----------
def _likers_list(chat_id: int) -> List[int]:
    me = users[str(chat_id)]
    res = []
    for uid, u in users.items():
        if int(uid) == chat_id:
            continue
        if me.get("status") != "active":
            continue
        if int(uid) in me.get("blocked", []):
            continue
        if chat_id in u.get("likes", []):
            res.append(int(uid))
    return list(dict.fromkeys(res))

def _likers_start(chat_id: int) -> None:
    queue = _likers_list(chat_id)
    if not queue:
        bot.send_message(chat_id, decorate("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª. –ù–æ –≤—Å—ë –≤–ø–µ—Ä–µ–¥–∏! üòä"))
        return
    LIKERS_STATE[chat_id] = {"queue": queue, "idx": 0, "current": queue[0]}
    users[str(chat_id)]["incoming_likes_unseen"] = []
    save_users()
    _likers_show_current(chat_id)

def _likers_show_current(chat_id: int) -> None:
    st = LIKERS_STATE.get(chat_id)
    if not st:
        bot.send_message(chat_id, decorate("–ê–Ω–∫–µ—Ç—ã –ª–∞–π–∫–Ω—É–≤—à–∏—Ö –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."))
        main_menu(chat_id)
        return
    queue, idx = st["queue"], st["idx"]
    if idx >= len(queue):
        LIKERS_STATE.pop(chat_id, None)
        bot.send_message(chat_id, decorate("–¢—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) –≤—Å–µ –ª–∞–π–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é."))
        main_menu(chat_id)
        return
    cur = queue[idx]
    st["current"] = cur
    send_card(chat_id, cur, prefix="üíò –¢–µ–±—è –ª–∞–π–∫–Ω—É–ª–∏")
    bot.send_message(chat_id, decorate("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"), reply_markup=get_actions_kb())

def _likers_remove_current(chat_id: int) -> Optional[int]:
    st = LIKERS_STATE.get(chat_id)
    if not st:
        return None
    queue, idx = st["queue"], st["idx"]
    if not queue or idx >= len(queue):
        return None
    return queue.pop(idx)

def _likers_next(chat_id: int) -> None:
    st = LIKERS_STATE.get(chat_id)
    if not st:
        main_menu(chat_id); return
    _likers_show_current(chat_id)

def like_from_likers(chat_id: int) -> None:
    st = LIKERS_STATE.get(chat_id)
    if not st:
        return
    target_id = st["current"]
    my = users[str(chat_id)]
    trg = users[str(target_id)]
    if target_id not in my.get("likes", []):
        my["likes"].append(target_id)
    my["lightnings"] = my.get("lightnings", 0) + 0.1
    save_users()
    if chat_id in trg.get("likes", []):
        handle_mutual_match(chat_id, target_id)
    else:
        bot.send_message(chat_id, decorate("üíå –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ñ–¥—ë–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏."))
    _likers_remove_current(chat_id)
    _likers_next(chat_id)

def skip_from_likers(chat_id: int) -> None:
    _likers_remove_current(chat_id)
    _likers_next(chat_id)

def block_from_likers(chat_id: int) -> None:
    st = LIKERS_STATE.get(chat_id)
    if not st:
        return
    target_id = st["current"]
    me = users[str(chat_id)]
    if target_id not in me.get("blocked", []):
        me.setdefault("blocked", []).append(target_id)
    save_users()
    bot.send_message(chat_id, decorate("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫."))
    _likers_remove_current(chat_id)
    _likers_next(chat_id)

def report_from_likers(chat_id: int) -> None:
    st = LIKERS_STATE.get(chat_id)
    if not st:
        return
    target_id = st["current"]
    users[str(target_id)]["reports"] = users[str(target_id)].get("reports", 0) + 1
    me = users[str(chat_id)]
    if target_id not in me.get("blocked", []):
        me.setdefault("blocked", []).append(target_id)
    save_users()
    bot.send_message(chat_id, decorate("–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–∞–ª–æ–±—É. –ú—ã —Å–∫—Ä—ã–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–±—è."))
    _likers_remove_current(chat_id)
    _likers_next(chat_id)
# path: bot.py (Part 3/3)

# --------------------------- Anon chat ---------------------------
def anon_waiting_menu(chat_id: int) -> None:
    m = types.ReplyKeyboardMarkup(resize_keyboard=True)
    m.row("‚è≠ –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫", "üîö –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
    m.row("ü§ù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º (@username)")
    bot.send_message(chat_id, nice_menu_title("–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶"), reply_markup=m)

def anon_chat_menu(chat_id: int) -> None:
    m = types.ReplyKeyboardMarkup(resize_keyboard=True)
    m.row("‚è≠ –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫", "üîö –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
    m.row("ü§ù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º (@username)")
    bot.send_message(chat_id, decorate("üïµÔ∏è –í—ã –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ.\n–ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."), reply_markup=m)

def _init_anon_stats(a: int, b: int) -> None:
    for uid, partner in [(a, b), (b, a)]:
        ANON_STATS[uid] = {
            "partner": partner,
            "start_ts": now_ts(),
            "counts": {"text": 0, "photo": 0, "video": 0, "audio": 0, "voice": 0, "document": 0, "sticker": 0},
        }

def _finish_anon_stats(uid: int) -> dict:
    return ANON_STATS.pop(uid, None) or {}

def _send_anon_summary(uid: int, stats: dict) -> None:
    if not stats:
        return
    start = stats.get("start_ts", now_ts())
    dur = int(now_ts() - start)
    mins = dur // 60
    secs = dur % 60
    c = stats.get("counts", {})
    total = sum(c.values())
    bot.send_message(
        uid,
        decorate(
            "üìä –ò—Ç–æ–≥–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞:\n\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{mins}–º {secs}—Å</b>\n"
            f"‚úâ –°–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: <b>{total}</b>\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç: <b>{c.get('text',0)}</b>\n"
            f"‚Ä¢ –§–æ—Ç–æ: <b>{c.get('photo',0)}</b>  ‚Ä¢ –í–∏–¥–µ–æ: <b>{c.get('video',0)}</b>\n"
            f"‚Ä¢ –ì–æ–ª–æ—Å: <b>{c.get('voice',0)}</b>  ‚Ä¢ –ê—É–¥–∏–æ: <b>{c.get('audio',0)}</b>\n"
            f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: <b>{c.get('document',0)}</b>  ‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã: <b>{c.get('sticker',0)}</b>"
        ),
    )

def start_anon_chat(chat_id: int) -> None:
    if users.get(str(chat_id), {}).get("status") != "active":
        bot.send_message(chat_id, decorate("üßä –ê–Ω–∫–µ—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –†–∞–∑–º–æ—Ä–æ–∑—å/–∞–∫—Ç–∏–≤–∏—Ä—É–π –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."))
        return
    if chat_id in ANON_PEERS:
        anon_chat_menu(chat_id)
        return
    if chat_id in ANON_QUEUE:
        anon_waiting_menu(chat_id)
        return
    if ANON_QUEUE:
        partner = ANON_QUEUE.pop(0)
        if partner == chat_id:
            start_anon_chat(chat_id)
            return
        ANON_PEERS[chat_id] = partner
        ANON_PEERS[partner] = chat_id
        _init_anon_stats(chat_id, partner)
        bot.send_message(partner, decorate("üîó –ù–∞—à—ë–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!"))
        anon_chat_menu(partner)
        bot.send_message(chat_id, decorate("üîó –ù–∞—à—ë–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!"))
        anon_chat_menu(chat_id)
        return
    ANON_QUEUE.append(chat_id)
    anon_waiting_menu(chat_id)

def _end_chat_for(uid: int, notify_partner: bool = True):
    partner = ANON_PEERS.pop(uid, None)
    stats_uid = _finish_anon_stats(uid)
    _send_anon_summary(uid, stats_uid)
    if partner is not None:
        ANON_PEERS.pop(partner, None)
        stats_partner = _finish_anon_stats(partner)
        _send_anon_summary(partner, stats_partner)
        if notify_partner:
            bot.send_message(partner, decorate("‚ùó –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç."))
            main_menu(partner)
    main_menu(uid)

def stop_anon_chat(chat_id: int) -> None:
    if chat_id in ANON_QUEUE:
        ANON_QUEUE.remove(chat_id)
        bot.send_message(chat_id, decorate("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞."))
        main_menu(chat_id)
        return
    if chat_id in ANON_PEERS:
        _end_chat_for(chat_id, notify_partner=True)
        return
    bot.send_message(chat_id, decorate("–í—ã –Ω–µ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ."))

def anon_next_partner(chat_id: int) -> None:
    if chat_id in ANON_QUEUE:
        return
    if chat_id in ANON_PEERS:
        _end_chat_for(chat_id, notify_partner=True)
    start_anon_chat(chat_id)

def anon_forward_any(message) -> None:
    chat_id = message.chat.id
    if chat_id not in ANON_PEERS:
        return
    partner = ANON_PEERS.get(chat_id)
    try:
        bot.copy_message(partner, chat_id, message.message_id)
        if str(chat_id) in users:
            users[str(chat_id)]["lightnings"] = users[str(chat_id)].get("lightnings", 0) + ANON_MESSAGE_BONUS
        st = ANON_STATS.get(chat_id)
        if st:
            if message.content_type in ("video", "audio", "voice", "document", "sticker", "photo"):
                key = "photo" if message.content_type == "photo" else message.content_type
            else:
                key = "text"
            st["counts"][key] = st["counts"].get(key, 0) + 1
        save_users()
    except Exception:
        bot.send_message(chat_id, decorate("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."))

@bot.message_handler(content_types=["video", "audio", "voice", "document", "sticker", "video_note", "location", "contact"])
def anon_media_router(message):
    anon_forward_any(message)

# --------------------------- Callbacks (inline buttons) ---------------------------
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("unblock:"))
def cb_unblock(call):
    try:
        uid = call.from_user.id
        target = int(call.data.split(":")[1])
        me = users.get(str(uid))
        if me and target in me.get("blocked", []):
            me["blocked"].remove(target)
            save_users()
            bot.answer_callback_query(call.id, "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
            bot.send_message(uid, decorate("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ."))
        else:
            bot.answer_callback_query(call.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception:
        pass

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("rate:"))
def cb_rate(call):
    try:
        uid = call.from_user.id
        _, partner_str, val_str = call.data.split(":")
        partner = int(partner_str)
        val = int(val_str)
        if str(partner) in users and str(uid) in users:
            users[str(partner)]["ratings_received_total"] = users[str(partner)].get("ratings_received_total", 0) + val
            users[str(partner)]["ratings_received_count"] = users[str(partner)].get("ratings_received_count", 0) + 1
            pending = users[str(uid)].get("pending_rate", [])
            users[str(uid)]["pending_rate"] = [j for j in pending if j.get("partner") != partner]
            save_users()
            bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
            bot.send_message(uid, decorate("üôè –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —É—á—Ç–µ–Ω–∞."))
        else:
            bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception:
        pass

# --------------------------- Text router ---------------------------
@bot.message_handler(func=lambda m: True, content_types=["text"])
def menu_handler(message) -> None:
    chat_id = message.chat.id
    text = (message.text or "").strip()

    if str(chat_id) in users:
        users[str(chat_id)]["username"] = message.from_user.username or users[str(chat_id)].get("username")

    if chat_id in USER_SESSION and USER_SESSION[chat_id].get("state") == "registration":
        return

    if str(chat_id) not in users or users[str(chat_id)].get("status") == "deactivated":
        start_registration(message)
        return

    u = users.get(str(chat_id))
    if u:
        last = u.get("last_active", 0)
        if now_ts() - last < 0.4:
            return
        u["last_active"] = now_ts()
        save_users()

    # –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç
    if text == "üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç":
        start_anon_chat(chat_id); return
    if text == "üîö –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞":
        stop_anon_chat(chat_id); return
    if text == "‚è≠ –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫":
        anon_next_partner(chat_id); return
    if text == "ü§ù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º (@username)":
        if chat_id in ANON_PEERS:
            partner = ANON_PEERS.get(chat_id)
            uname = message.from_user.username
            if uname:
                bot.send_message(partner, decorate(f"ü§ù –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–µ–ª–∏–ª—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º: @{uname}"))
                bot.send_message(chat_id, decorate("–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à @username —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É."))
            else:
                link = f'tg://user?id={chat_id}'
                bot.send_message(partner, decorate(f'ü§ù –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–µ–ª–∏–ª—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º: <a href="{link}">–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>'))
                bot.send_message(chat_id, decorate("–£ –≤–∞—Å –Ω–µ—Ç @username. –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É-–ø—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É."))
        else:
            bot.send_message(chat_id, decorate("–í—ã –Ω–µ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ."))
        return
    if chat_id in ANON_PEERS:
        anon_forward_any(message); return

    # –ì–ª–∞–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
    if text == "üîç –ü–æ–∏—Å–∫":
        search_profile(chat_id); return
    if text in ("üìù –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"):
        show_my_profile(chat_id); return
    if text == "üî• –ú—ç—Ç—á–∏":
        me = users[str(chat_id)]
        matches = me.get("matches", [])
        if not matches:
            bot.send_message(chat_id, decorate("üî• –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π."))
        else:
            bot.send_message(chat_id, decorate("üî• –í–∞—à–∏ –º–µ—Ç—á–∏:"))
            for uid in matches[:20]:
                send_card(chat_id, uid, prefix="üî• –ú–µ—Ç—á")
        return
    if text == "üíò –ö—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª":
        _likers_start(chat_id); return
    if text == "üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏":
        top = leaderboard_top()
        if not top:
            bot.send_message(chat_id, decorate("–ü–æ–∫–∞ –ø—É—Å—Ç–æ."))
        else:
            lines = [f"{idx+1}. {users[str(uid)]['name']} ‚Äî {score:.2f}‚ö°" for idx, (uid, score) in enumerate(top)]
            bot.send_message(chat_id, decorate("üèÜ –¢–æ–ø –ø–æ –º–æ–ª–Ω–∏—è–º:\n" + "\n".join(lines)))
        return
    if text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        settings_menu(chat_id); return
    if text == "‚ö° –ú–æ–ª–Ω–∏–∏":
        show_lightnings_info(chat_id); return
    if text in ["‚¨Ö –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if chat_id in LIKERS_STATE:
            LIKERS_STATE.pop(chat_id, None)
            bot.send_message(chat_id, decorate("–í—ã—Ö–æ–¥ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–ö—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª¬ª."))
        main_menu(chat_id); return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if text == "‚úè –ò–º—è":
        bot.send_message(chat_id, decorate("‚úè –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:"))
        USER_SESSION[chat_id] = {"state": "edit", "field": "name"}; return
    if text == "üéÇ –í–æ–∑—Ä–∞—Å—Ç":
        bot.send_message(chat_id, decorate("üéÇ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:"))
        USER_SESSION[chat_id] = {"state": "edit", "field": "age"}; return
    if text == "üåÜ –ì–æ—Ä–æ–¥":
        USER_SESSION[chat_id] = {"state": "edit_city"}
        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m.row("–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥")
        m.row("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö–∞–∑–∞–Ω—å", "–õ—é–±–æ–π")
        m.row("–û—Ç–º–µ–Ω–∞")
        bot.send_message(chat_id, decorate("üåÜ –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É:"), reply_markup=m); return
    if text == "üìù –û–ø–∏—Å–∞–Ω–∏–µ":
        bot.send_message(chat_id, decorate("üìù –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"))
        USER_SESSION[chat_id] = {"state": "edit", "field": "about"}; return
    if text == "üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è":
        USER_SESSION[chat_id] = {"state": "edit", "field": "pref"}
        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m.row("üë© –î–µ–≤—É—à–∫–∏", "üë® –ü–∞—Ä–Ω–∏", "–í—Å–µ")
        bot.send_message(chat_id, decorate("–í—ã–±–µ—Ä–∏, –∫–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:"), reply_markup=m); return

    # –§–∏–ª—å—Ç—Ä—ã
    if text in ["üîé –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"]:
        filters_menu(chat_id); return
    if text == "üèôÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É":
        USER_SESSION[chat_id] = {"state": "filters", "field": "city"}
        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(0, len(POPULAR_CITIES[:9]), 3):
            m.row(*POPULAR_CITIES[i:i+3])
        m.row("–õ—é–±–æ–π", "–û—Ç–º–µ–Ω–∞")
        bot.send_message(chat_id, decorate("üèôÔ∏è –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏):"), reply_markup=m); return
    if text == "üéö –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É":
        USER_SESSION[chat_id] = {"state": "filters", "field": "age"}
        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m.row("–õ—é–±–æ–π", "–û—Ç–º–µ–Ω–∞")
        bot.send_message(chat_id, decorate("üéö –í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 18-30 (–∏–ª–∏ '–õ—é–±–æ–π'):"), reply_markup=m); return
    if text == "üéØ –ö–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å":
        USER_SESSION[chat_id] = {"state": "filters", "field": "pref"}
        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
        m.row("üë© –î–µ–≤—É—à–∫–∏", "üë® –ü–∞—Ä–Ω–∏")
        m.row("–í—Å–µ", "–ö–∞–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
        m.row("–û—Ç–º–µ–Ω–∞")
        bot.send_message(chat_id, decorate("üéØ –ö–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?"), reply_markup=m); return
    if text == "üßπ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã":
        users[str(chat_id)]["filters"] = dict(DEFAULT_FILTERS); save_users()
        bot.send_message(chat_id, decorate("üßπ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö.")); filters_menu(chat_id); return
    if text == "üîÑ –°–±—Ä–æ—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞":
        users[str(chat_id)]["seen"] = []; save_users()
        bot.send_message(chat_id, decorate("üîÑ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–∏—â–µ–Ω–∞.")); return

    # –î–µ–π—Å—Ç–≤–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö (–ø–æ–∏—Å–∫/–ª–µ–Ω—Ç–∞ –ª–∞–π–∫–æ–≤)
    if text == "‚ù§Ô∏è –õ–∞–π–∫":
        if chat_id in LIKERS_STATE:
            like_from_likers(chat_id)
        else:
            like_current(chat_id)
        return
    if text == "‚è≠ –°–∫–∏–ø":
        if chat_id in LIKERS_STATE:
            skip_from_likers(chat_id)
        else:
            users[str(chat_id)]["lightnings"] = users[str(chat_id)].get("lightnings", 0) + 0.05; save_users()
            search_profile(chat_id)
        return
    if text == "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ":
        if chat_id in LIKERS_STATE:
            target_id = LIKERS_STATE[chat_id]["current"]
            bot.send_message(chat_id, decorate("üí¨ –í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:"))
            USER_SESSION[chat_id] = {"state": "send_message", "target": target_id}
        elif chat_id in SEARCH_STATE:
            target_id = SEARCH_STATE[chat_id]["current"]
            bot.send_message(chat_id, decorate("üí¨ –í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:"))
            USER_SESSION[chat_id] = {"state": "send_message", "target": target_id}
        return
    if text == "üö´ –ë–ª–æ–∫":
        if chat_id in LIKERS_STATE:
            block_from_likers(chat_id)
        elif chat_id in SEARCH_STATE:
            target_id = SEARCH_STATE[chat_id]["current"]
            me = users[str(chat_id)]
            if target_id not in me.get("blocked", []):
                me.setdefault("blocked", []).append(target_id)
            save_users()
            bot.send_message(chat_id, decorate("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω."))
            search_profile(chat_id)
        return
    if text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è":
        if chat_id in LIKERS_STATE:
            report_from_likers(chat_id)
        elif chat_id in SEARCH_STATE:
            target_id = SEARCH_STATE[chat_id]["current"]
            users[str(target_id)]["reports"] = users[str(target_id)].get("reports", 0) + 1
            me = users[str(chat_id)]
            if target_id not in me.get("blocked", []):
                me.setdefault("blocked", []).append(target_id)
            save_users()
            bot.send_message(chat_id, decorate("–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–∞–ª–æ–±—É. –ú—ã —Å–∫—Ä—ã–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–±—è."))
            search_profile(chat_id)
        return

    # –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if text == "üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫":
        show_blacklist(chat_id); return

    # –§—Ä–∏–∑/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
    if text == "üßä –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å / –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å":
        s = users[str(chat_id)]["status"]
        users[str(chat_id)]["status"] = "active" if s != "active" else "frozen"; save_users()
        bot.send_message(chat_id, decorate(f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è: <b>{users[str(chat_id)]['status']}</b>.")); return
    if text == "üóë –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å / –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å":
        s = users[str(chat_id)]["status"]
        users[str(chat_id)]["status"] = "active" if s == "deactivated" else "deactivated"; save_users()
        bot.send_message(chat_id, decorate(f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è: <b>{users[str(chat_id)]['status']}</b>.")); return

    # States: edit / send_message / filters / edit_city
    if chat_id in USER_SESSION:
        st = USER_SESSION[chat_id].get("state")

        if st == "edit":
            field = USER_SESSION[chat_id]["field"]
            value = text
            if field == "age" and not value.isdigit():
                bot.send_message(chat_id, decorate("‚ö† –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")); return
            if field == "age": value = int(value)
            if field == "pref":
                low = (text or "").lower()
                if "–¥–µ–≤—É—à" in low: value = "female"
                elif "–ø–∞—Ä–Ω" in low: value = "male"
                else: value = "any"
            users[str(chat_id)][field] = value; save_users()
            bot.send_message(chat_id, decorate("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"))
            USER_SESSION.pop(chat_id, None); settings_menu(chat_id); return

        if st == "send_message":
            target_id = USER_SESSION[chat_id]["target"]
            users[str(chat_id)]["lightnings"] = users[str(chat_id)].get("lightnings", 0) + 0.2
            bot.send_message(target_id, decorate(f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{users[str(chat_id)]['name']}</b>:\n\n{text}"))
            bot.send_message(chat_id, decorate("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")); save_users()
            USER_SESSION.pop(chat_id, None)
            if chat_id in LIKERS_STATE:
                _likers_show_current(chat_id)
            else:
                search_profile(chat_id)
            return

        if st == "filters":
            field = USER_SESSION[chat_id].get("field")
            f = users[str(chat_id)].setdefault("filters", dict(DEFAULT_FILTERS))
            if text.lower() == "–æ—Ç–º–µ–Ω–∞":
                USER_SESSION.pop(chat_id, None); filters_menu(chat_id); return

            if field == "city":
                if text.lower() == "–ª—é–±–æ–π":
                    f["city"] = None
                else:
                    city, sugg = normalize_city(text)
                    if not city:
                        m = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        for i in range(0, len(sugg), 3):
                            m.row(*sugg[i:i+3])
                        m.row("–õ—é–±–æ–π", "–û—Ç–º–µ–Ω–∞")
                        bot.send_message(chat_id, decorate("–ù–µ –ø–æ–Ω—è–ª –≥–æ—Ä–æ–¥. –í—ã–±–µ—Ä–∏ –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:"), reply_markup=m)
                        return
                    f["city"] = city
                save_users(); USER_SESSION.pop(chat_id, None)
                bot.send_message(chat_id, decorate("‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É –æ–±–Ω–æ–≤–ª—ë–Ω.")); filters_menu(chat_id); return

            if field == "age":
                if text.lower() == "–ª—é–±–æ–π":
                    f["age_min"], f["age_max"] = None, None
                else:
                    rng = text.replace(" ", "").split("-")
                    if len(rng) != 2 or not all(p.isdigit() for p in rng):
                        bot.send_message(chat_id, decorate("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: 18-30 –∏–ª–∏ '–õ—é–±–æ–π'.")); return
                    amin, amax = int(rng[0]), int(rng[1])
                    if amin < 14 or amax < 14 or amin > amax:
                        bot.send_message(chat_id, decorate("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ú–∏–Ω–∏–º—É–º 14 –ª–µ—Ç, min ‚â§ max.")); return
                    f["age_min"], f["age_max"] = amin, amax
                save_users(); USER_SESSION.pop(chat_id, None)
                bot.send_message(chat_id, decorate("‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –æ–±–Ω–æ–≤–ª—ë–Ω.")); filters_menu(chat_id); return

            if field == "pref":
                low = text.lower()
                if "–¥–µ–≤—É—à" in low: f["pref"] = "female"
                elif "–ø–∞—Ä–Ω" in low: f["pref"] = "male"
                elif "–∫–∞–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ" in low: f["pref"] = None
                else: f["pref"] = "any"
                save_users(); USER_SESSION.pop(chat_id, None)
                bot.send_message(chat_id, decorate("‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")); filters_menu(chat_id); return

        if st == "edit_city":
            if text.lower() in ["–æ—Ç–º–µ–Ω–∞", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]:
                USER_SESSION.pop(chat_id, None); settings_menu(chat_id); return
            if text.lower() == "–ª—é–±–æ–π":
                users[str(chat_id)]["city"] = "–ù–µ —É–∫–∞–∑–∞–Ω"; save_users()
                bot.send_message(chat_id, decorate("–ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω: <b>–ù–µ —É–∫–∞–∑–∞–Ω</b>.")); USER_SESSION.pop(chat_id, None); settings_menu(chat_id); return
            city, sugg = normalize_city(text)
            if not city:
                m = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for i in range(0, len(sugg), 3):
                    m.row(*sugg[i:i+3])
                m.row("–õ—é–±–æ–π", "–û—Ç–º–µ–Ω–∞")
                bot.send_message(chat_id, decorate("–ù–µ –ø–æ–Ω—è–ª –≥–æ—Ä–æ–¥. –í—ã–±–µ—Ä–∏ –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:"), reply_markup=m)
                return
            users[str(chat_id)]["city"] = city; save_users()
            bot.send_message(chat_id, decorate(f"–ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω: <b>{city}</b>.")); USER_SESSION.pop(chat_id, None); settings_menu(chat_id); return

    # –§–æ–ª–±—ç–∫
    main_menu(chat_id)

# --------------------------- Bot entrypoint ---------------------------
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
bot.polling(none_stop=True)
